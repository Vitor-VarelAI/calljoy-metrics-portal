# 📤 Upload System – CallScan (Replit Implementation)

This spec describes the full implementation of the **file upload system** for CallScan, using Replit (FastAPI backend + Lovable/React frontend).

---

## 🧠 Purpose

Enable users (supervisors or agents) to upload:
- Audio files (`.mp3`, `.wav`)
- Metadata files (`.xlsx`)

Uploads trigger the analysis pipeline:  
**Upload → Transcribe → Analyze → Generate Result**

---

## 📁 Backend Implementation (FastAPI)

### Endpoint: `POST /upload`

- Accept `multipart/form-data`
- Allow multiple files per request
- Validate file types (`.mp3`, `.wav`, `.xlsx`)
- Save files locally or in a temporary storage folder
- Return:
```json
{
  "status": "success",
  "call_ids": ["CALL-9582", "CALL-9583"],
  "message": "Files received and processing started."
}


Suggested Backend Folder Structure
bash
Copy
Edit
/api
  /routes
    upload.py
  /services
    file_handler.py
    transcription.py
    analysis.py
  /utils
    validator.py
    logger.py

    Required Backend Steps After Upload
    Store file with unique ID

    Transcribe audio (via faster-whisper)

    Load custom rules (from /rules)

    Call OpenAI API with transcription + rules

    Generate result JSON

    (Optional) Generate PDF / HTML report

    Store final result per call ID

    🖼️ Frontend (Lovable / React Component)
    UI Elements:
    Drag & drop zone with dashed border

    File list preview with:

    Filename

    File type

    Status: “Ready”, “Uploading”, “Done”

    Remove icon (🗑️)

    [🚀 Start Analysis] button

    Disabled until at least 1 file is selected

    Shows loader while processing

    UX Flow:
    User drops/selects files

    Files appear in a list with basic metadata

    User clicks [Start Analysis]

    POST request sent to /upload

    On success:

    Show confirmation toast

    Redirect to /chamada/:id once analysis completes

    Or show a "View Results" button for each upload

    Accepted File Types:
    .mp3, .wav → triggers transcription

    .xlsx → triggers metadata ingestion (optional now, but pipeline-ready)

    ✅ Optional Enhancements
    Show progress per file (upload & processing)

    Allow multiple audio files per session

    Pre-check for duplicate files

    Auto-link .xlsx metadata to audio files by filename

    🔐 Notes
    All data must remain within EU (Hetzner)

    Do not send files to OpenAI — only transcriptions

    Temp files should be cleaned after analysis

    yaml
    Copy
    Edit
